An Autocall represents a financial product that enables investors to accrue profits, albeit at the expense of not having precise knowledge about the redemption date. Instead, investors are only apprised of the existence of a predetermined schedule, referred to as the fixing schedule.

The investor, in collaboration with the institution (often an investment bank) responsible for vending the product, delineates various parameters such as a fixing schedule, an underlying asset, a coupon rate, an Autocall threshold (call level), a coupon barrier (barrier), and a strike price.


Upon agreement between the investor and the institution (typically an investment bank) facilitating the product sale, certain parameters are defined, including a fixing_schedule, an underlying asset, a coupon rate, an Autocall threshold (call_level), a coupon barrier (barrier), and a strike.

The investor initiates the process by paying a nominal amount (principal) if the observation date corresponds to the last date in the fixing_schedule. For observation dates preceding the last one, three possible scenarios emerge:

1.If the underlying spot is less than the barrier, no payment is made, and the event is deemed a missed coupon.
2.If the underlying spot falls between the barrier and call_level, the investor receives the nominal amount plus the missed coupon. Importantly, the underlying will continue to be observed beyond this date.
3.If the underlying spot is greater than the call_level, the investor receives the nominal amount and the missed coupon, marking the end of the contract with no further observations.

If the contract does not conclude before the last observation date, the investor, on that date, first receives the nominal amount. Subsequently, if the underlying spot surpasses the barrier, the investor also receives the missed coupon. However, if the underlying spot is below the barrier, the investor incurs a payment obligation to compensate for the negative performance of the underlying asset.

In this Python notebook, I am creating a class named "Autocall" with six attributes that are specified during the instantiation of the class (the instance attribute). These attributes are:
-coupon
-principal
-call_level
-barrier
-strike
-fixing_schedule
The other attributes of "Autocall" class are class attributes.
The most important are :
-npaths_mc : number of path. During one of the path, I try to estimate the various future cash flows according to the level of the underlying asset, which I then discount to present value. 
-delta_bump : value relevant to the approach that will be used to estimate the delta
-gamma_bump : value relevant to the approach used to estimate the greek gamma
-vega_bump : value relevant to the approach used to estimate the greek vega
-theta_bump : value relevant to the approach used to estimate the greek tetha
-rho_bump : value relevant to the approach used to estimate the greek rho

the bumps are the smallest variations in certain market parameters that are sufficient to create a price movement.

The different method of the class are :

		
		1) gen_fixings

Arguments: spot (float), vol (volatility), rate (interest rate), div (dividend); all represent market parameters.
The function contains a for loop, with the number of iterations determined by the size of the fixing schedule.
Returns: A list of value that represents underlying spot at the different date of   		the schedule 

		2)pricer Function:

Arguments: spot (float), vol (volatility), rate (?), div (dividends), debug (default is false).
Utilizes:
npaths_mc
rnd_seed
The last value of the fixing schedule is the autocall maturity.
Loop 1: Number of iterations is npaths_mc, the purpose of the loop is to fill a list named                 payoff_by_path
Each iteration involves:
Creation of the gen_fixings list (representing the spot at different dates).
Initialization of payoff and missed_coupon as a counters.
Loop 2: Number of iterations is the size of gen_fixings.
This loop is for updating the payoff.
The outer loop (n_path loop) is for updating the list payoff_by_path.
Returns: The calculated price equal to payoff_by_path mean

		3)delta Function:

Arguments: spot (float), vol (market variable), rate (market float), model (pricer).
Calculates a price of the Autocall with the current spot using the pricer function with current spot: price = model(spot,vol,rate,div)
Calculates a spot_up using delta_bump : spot_up = spot *(1+delta_bump/100); then we can calculate price_up = model(spot_up,vol,rate,div)
Returns the forward delta: delta_fd = (price_up - price) / (spot_up - spot)

		4)gamma Function:

Arguments: Same as delta.
Calculates a spot-up and then a price-up.
Calculates a spot-down and then a price-down: spot_down = spot * (1-bumpvalue/100)
Derives the gamma 

		5)vega Function:

Arguments: Same as delta.
Calculates a vol-up and then a price-up.
Derives the vega using a specific formula: (price_up - price) / (vega_up - vega).

		6)theta Function:

Utilizes a for loop to generate new fixing dates, with the size of the loop corresponding to the size of the fixing date.
Generates a price shift with the new fixing date.
Calculates the forward theta (theta_fd): (price_shift - price) / bumpvalue * 1/365.

		7)rho Function:

Arguments: Same as delta.
Calculates a rate-up thanks to rho_bump and then a price-up according to rate_up.
Derives the vega using a specific formula: (price_up - price) / (rate_up - rate).


		8)volga Function:

Arguments: Same as delta.
Calculates a vol-up with vega_bump and then a vega-up according to vol_up.
Derives the vega using a specific formula: (vega_up - vega) / (vol_up - vol).


















































